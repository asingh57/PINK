#!/usr/bin/python
from __future__ import print_function
import subprocess
import signal  
import etcd
import time
import sys
import os


#SYSADMIN SHOULD SETUP THESE VARIABLES
processing_time_allowed=10*60*10#00 # how much total time must be given to the docker to run (excluding sigterm time)
sigterm_time=2*60*10#00 #how many minutes before the deadline should a sigterm be given to the docker
max_uploads_allowed_quota=5 #number of docker image storage allowed on machine
max_active_containers=2 #max number of images allowed to run at a given time
uploads_directory="/uploads"
completed_directory="/completed"
#####################
 

####################Server status codes
server_available=0
server_unavailable=1
####################

############################## job status codes
uploaded_to_web_server=0,
uploaded_to_processing_server=1
process_errored=2 
process_stopped_backend_unavailable=3
process_running=4
process_completed=5
deleting_job=6
###############################

#delete_signal codes:
dont_delete=0
delete=1


#stop signals
stop_server_process_uploads=0#mark the server down, accept, no new uploads but keep processing all jobs that are already on there (including unprocessed uploads) # STRONGLY RECOMMENDED
stop_server_ignore_uploads=1#mark the server down, but keep processing jobs that are already running #SAFE BUT SOFT STOP IS PREFERABLE
hard_stop_server=2#forcibly stop all containers, without backup #USE ONLY IF ABSOLUTELY NECESSARY SINCE ALL CURRENTLY RUNNING IMAGES WOULD START FROM SCRATCH UPON RESTART
run_server=3# the server should keep running

current_run_spots_available=max_active_containers
current_upload_spots_available=max_uploads_allowed_quota


client = etcd.Client(host=({% for host in groups['etcd_cluster'] %}("{{ hostvars[host]['ansible_default_ipv4']['address'] }}",2379){% if not loop.last %},{% endif %} {% endfor %}),allow_reconnect=True)
machine_ip="{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
machine_name= "{{ inventory_hostname }}"


os.system("mkdir -p "+uploads_directory)#create uploads directory if it doesnt exist
os.system("mkdir -p "+completed_directory)#create directory for completed docker's tar files

def utf_to_int(ut_str):#converts utf to int
  try:
    return int(ut_str.encode('ascii','ignore'))
  except AttributeError:# it is a float
    return int(ut_str)
       
    
def etcd_loop_till_write(key,value):#writes key while ignoring errors
  while True:
    try:
      return client.write(key,value)
    except etcd.EtcdKeyNotFound: #TODO EtcdKeyNotFound error handling
      return -1
    except etcd.EtcdException:
      continue

def etcd_loop_till_read(key,get_recursive=False):#reads keys while ignoring errors
  while True:
    try:
      return client.read(key,recursive=get_recursive)
    except etcd.EtcdKeyNotFound:#TODO EtcdKeyNotFound error handling
      return -1
    except etcd.EtcdException:
      continue
      
def etcd_loop_till_delete(key):#deletes keys while ignoring errors
  while True:
    try:
      return client.delete(key, recursive=True)
    except etcd.EtcdKeyNotFound:#TODO EtcdKeyNotFound error handling
      return -1
    except etcd.EtcdException:
      continue

def get_delete_queue():#gets list of deletions that are not running for all users
  list=[]
  not_running={}
  is_deleted={}
  try:
    data=etcd_loop_till_read("/users",True)
    #get the entire structure
    if (data!=-1):
      for user_str in data.children:
        user_str=user_str.key.encode('ascii','ignore')
        split = user_str.split("/")
        file_name=split[3]
        if split[-1]=="delete_signal" and utf_to_int(etcd_loop_till_read(user_str).value)==delete:
          #list.append(split[3])
          is_deleted[file_name]=True
        if split[-1]=="status" and utf_to_int(etcd_loop_till_read(user_str).value)!=process_running:
          not_running[file_name]=True
        if file_name in not_running and file_name in is_deleted:
          list.append(file_name)
          del not_running[file_name]
  except etcd.EtcdKeyNotFound:#TODO EtcdKeyNotFound error handling
    return list
  except etcd.EtcdException: 
    return list
  except IndexError: 
    return list 
  return list

def eprint(*args, **kwargs):
  print(*args, file=sys.stderr, **kwargs)


terminate=False

def terminateProcess(signalNumber, frame): #hard stop function,
  eprint("SIGINT RECEIVED BY PROCESS, CLOSING")
  etcd_loop_till_write('/machines/'+machine_ip+'/status', server_unavailable) # set processing machine as unavailable
  
  terminate=True
  
signal.signal(signal.SIGTERM, terminateProcess) #hard stop when one of these signals is received
signal.signal(signal.SIGINT, terminateProcess)

#*********************
#start all existing images

out = subprocess.Popen(['docker','container', 'ls', '-a','--format','{{ '{{' }}.Name{{ '}}' }}'], 
       stdout=subprocess.PIPE, 
       stderr=subprocess.STDOUT)
stdout,stderr = out.communicate()
running_dockers=[]
running_dockers=stdout.splitlines()
    
    
for docker_name in running_dockers:
  split = docker_name.split("-")
  user= split[0]
  timestamp= split[1]
  os.system("docker start "+docker_name)  # start all containers
  etcd_loop_till_write('/users/'+user+'/'+docker_name+'/status', process_running)
  etcd_loop_till_write('/users/'+user+'/'+docker_name+'/processing_machine_address', machine_ip)
  etcd_loop_till_write('/users/'+user+'/'+docker_name+'/processing_machine_name', machine_name)
  etcd_loop_till_write('/users/'+user+'/'+docker_name+'/sigterm_time', utf_to_int(round(time.time() * 1000))+processing_time_allowed)
  current_run_spots_available-=1
#*********************

def run_uploads(running_dockers):
  out = subprocess.Popen(["ls","-1tr",uploads_directory], #get list of docker images in uploads folder in time ascending order
         stdout=subprocess.PIPE, 
         stderr=subprocess.STDOUT)
  out.wait()
  stdout,stderr = out.communicate()
  files_available=stdout.splitlines()
  global current_upload_spots_available
  old_spots=current_upload_spots_available
  current_upload_spots_available=max_uploads_allowed_quota-len(files_available)
  
  
  for image_name in files_available:
    split = image_name.split("-")
    user= split[0]
    if utf_to_int(etcd_loop_till_read('/users/'+user+'/'+image_name+'/status').value)!=uploaded_to_processing_server:
      continue
    global current_run_spots_available
    
    if current_run_spots_available>0:
      arr=["docker", "load","-i"
          ,uploads_directory+"/"+image_name
          ] 
      eprint(" ".join(arr))
      out = subprocess.Popen(["docker", "load","-i"
          ,uploads_directory+"/"+image_name
          ]
      , stdout=subprocess.PIPE, stderr=subprocess.PIPE)# try importing
      out.wait()
      (stdout, stderr) = out.communicate()

      if(out.returncode==0):#get output and set tag
        eprint(stdout.split(" "))
        old_img=stdout.split(" ")[-1].rstrip("\n")
        new_img=image_name
        os.system("docker tag "+old_img+" "+new_img)
        os.system("docker rmi "+old_img)
        
        current_run_spots_available-=1
        os.system("docker run -d "+" --runtime=nvidia "+" --name "+image_name+" "+image_name)
        eprint("docker run -d "+" --runtime=nvidia "+" --name "+image_name+" "+image_name)
        etcd_loop_till_write('/users/'+user+'/'+image_name+'/status', process_running)
        etcd_loop_till_write('/users/'+user+'/'+image_name+'/processing_machine_address', machine_ip)
        etcd_loop_till_write('/users/'+user+'/'+image_name+'/processing_machine_name', machine_name)
        etcd_loop_till_write('/users/'+user+'/'+image_name+'/sigterm_time', utf_to_int(round(time.time() * 1000))+processing_time_allowed)
        etcd_loop_till_write('/users/'+user+'/'+image_name+'/hard_stop_time', utf_to_int(round(time.time() * 1000))+processing_time_allowed+sigterm_time)
        
      else:#invalid image
        eprint(stdout)
        eprint(stderr)
        etcd_loop_till_write('/users/'+user+'/'+image_name+'/status', process_errored)
        
      os.system("rm "+uploads_directory+"/"+image_name)
      current_upload_spots_available+=1      
    else:
      break;
    
    if old_spots!=current_upload_spots_available:
      etcd_loop_till_write('/machines/'+machine_ip+'/upload_spots_available', current_upload_spots_available)
      
run_uploads(running_dockers)#do an initial processing of uploads

etcd_loop_till_write('/machines/'+machine_ip+'/status', server_available)#make sure server is marked up
etcd_loop_till_write('/machines/'+machine_ip+'/stop_signal', run_server)#make sure server is marked up


while True: 
  
  if terminate: # check if sigint was received
    break
  
  #look for a stop signal on etcd. (This will only stop the processing once all jobs have been completed
  stop_signal=utf_to_int(etcd_loop_till_read('/machines/'+machine_ip+'/stop_signal').value)
  
  if(stop_signal==hard_stop_server):#check if server is set as unavailable by one of the web servers
    #since server status and stop signal are two different things written by two different entities, the at most once property (AMO) is justified
    os.system("service pink_service stop")
  else: 
    current_time=utf_to_int(round(time.time() * 1000));
    
    #populate running dockers list
    out = subprocess.Popen(['docker' ,'images','--format','{{ '{{' }}.Repository{{ '}}' }}'], 
           stdout=subprocess.PIPE, 
           stderr=subprocess.STDOUT)
    stdout,stderr = out.communicate()
    running_dockers=stdout.splitlines()+get_delete_queue()
    for docker_name in running_dockers:
      split = docker_name.split("-")
      user= split[0]
      timestamp= split[1]
      if(utf_to_int(etcd_loop_till_read('/users/'+user+'/'+docker_name+'/delete_signal').value)==delete):
        os.system("docker stop --time 1 "+docker_name)
        os.system("docker rm "+docker_name)
        out = subprocess.Popen(["docker", "rmi",docker_name]
        , stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out.wait()
        (stdout, stderr) = out.communicate()
        if(out.returncode==0):
          current_run_spots_available+=1#docker was running
        #now delete the entire directory
        etcd_loop_till_delete('/users/'+user+'/'+docker_name)
        continue
      
      #check if the hard deadline is exceeded on any running dockers
      if utf_to_int(etcd_loop_till_read('/users/'+user+'/'+docker_name+'/hard_stop_time').value)>=current_time:
        #copy the docker_output_path into a tar 
        docker_output_path="/home"
        docker_output_path_temp=docker_output_path+"_temp"
        file_name="/"+docker_name+".tar.gz"
        #make a copy just in case current file is being written to so tar doesnt get file busy
        os.system("docker exec "+docker_name+" bash -c 'cp -r "+docker_output_path+" "+docker_output_path_temp+"'")
        #tar the folder
        os.system("docker exec "+docker_name+" bash -c 'tar -zcvf "+file_name+" "+docker_output_path_temp+"'")
        #stop the docker
        os.system("docker stop --time 1 "+docker_name)
        #copy the tar out of the container into the completed_directory
        os.system("docker cp "+docker_name+":"+ file_name +" "+completed_directory)
        #delete container        
        os.system("docker rm "+docker_name)
        #delete image
        os.system("docker rmi "+docker_name)
        
        #mark as available for download from server
        etcd_loop_till_write('/users/'+user+'/'+docker_name+'/status', process_completed)
        
        #increase current_run_spots_available count
        current_run_spots_available+=1
        
      #check if any of these dockers have exceeded the server sigterm time 
      if utf_to_int(etcd_loop_till_read('/users/'+user+'/'+docker_name+'/sigterm_time').value)>=current_time:
        os.system("docker kill --signal=SIGTERM "+docker_name)#send the SIGTERM to the docker. 
        #The entrypoint in the dockerfile will receive this and must process this within the sigterm time
        
        #now set a hard deadline on etcd
        current_time=utf_to_int(round(time.time() * 1000));
        etcd_loop_till_write('/users/'+user+'/'+docker_name+'/hard_stop_time', current_time+sigterm_time)
        
    
    if (stop_signal==stop_server_process_uploads or stop_signal==run_server):
      run_uploads(running_dockers)# check for any new uploads to process
      
  time.sleep(5)
  
  
  
# if escaped the above infinite loop, it implies the process was signaled to end
out = subprocess.Popen(['docker','container', 'ls', '-a','--format','{{ '{{' }}.Name{{ '}}' }}'], 
   stdout=subprocess.PIPE, 
   stderr=subprocess.STDOUT)
stdout,stderr = out.communicate()


running_dockers=stdout.splitlines()# get list of all dockers
for docker_name in running_dockers:
  split = docker_name.split("-")
  user= split[0]
  timestamp= split[1]

  etcd_loop_till_write('/users/'+user+'/'+docker_name+'/status', process_stopped_backend_unavailable) #set all dockers as stopped
  os.system("docker stop --time 1 "+docker_name)  # stop all containers  
os.system("docker rm -f $(docker ps -a -q)") # delete them all but not their images
os.system("docker volume rm $(docker volume ls -q)") #delete their file systems since everything will restart from scratch to avoid corruption
sys.exit()  
  
  




